{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAjBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OADAc,QAAQC,IAAIL,EAAOV,GAEf,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAoBtC,OAdAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAInB,CAACtB,IAIIuB,EDjBwBK,CAAa5B,GAAhCa,EAFuB,EAE5BN,KAAae,EAFe,EAEfA,QAEpB,OACI,qCACA,6BAAKtB,IACJsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACSL,EAAOJ,KAAI,SAAAC,GACT,OACC,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEZhBkB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAK9B,OACI,gCACI,8CACA,cAAC,EAAD,CACAA,cAAeA,IACf,uBACA,6BACK6C,EAAWrB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCbzB+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.de728f6b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats, ]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type='text'\r\n            value={inputValue}\r\n            onChange={handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=WUkD31JdBQ8eYAtXs7S91M2lEdgEGKrc`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    console.log(title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n        <div className=\"card-grid\">\r\n                {images.map(img => {\r\n                   return (\r\n                    <GifGridItem\r\n                    key={img.id}\r\n                    {...img}/>\r\n                   )\r\n                })}\r\n           \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs => {\r\n         \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n         \r\n        });\r\n    },[category]);\r\n\r\n   \r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory\r\n            setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {categories.map(category => (\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category}\r\n                    />\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}